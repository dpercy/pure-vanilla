
main = (input) -> show([
  pretty(prettyState_part1, eval([1, 1], isValid_part1, parse(input))),
  pretty(prettyState_part2, eval([0, 0], isValid_part2, parse(input))),
])

parse = (input) -> map(parseLine, splitlines(input))
parseLine = (line) -> filter(nonempty, split(line, ""))
nonempty = (s) -> 0 < length(s)

initialState = [1, 1] # x across, y down

guardStep = (isValid) -> (state, letter) ->
  let newState = step(state, letter) in
  if isValid(newState) then newState
  else state

isValid_part1 = (state) ->
  let x = first(state) in
  let y = first(rest(state)) in
  foldl(and, true, [ (-1) < x, x < 3,
                     (-1) < y, y < 3, ])

isValid_part2 = (state) ->
  # abs(x) + abs(y) <= 2
  let x = first(state) in
  let y = first(rest(state)) in
  (abs(x) + abs(y)) < 3

step = (state, letter) ->
  let x = first(state) in
  let y = first(rest(state)) in
  if      letter == "U" then [x, dec(y)]
  else if letter == "D" then [x, inc(y)]
  else if letter == "L" then [dec(x), y]
  else if letter == "R" then [inc(x), y]
  else error("bad letter")
inc = (n) -> n + 1
dec = (n) -> n - 1

eval = (state, isValid, lines) ->
  if isEmpty(lines) then []
  else let newState = evalLine(state, isValid, first(lines)) in
         cons(newState, eval(newState, isValid, rest(lines)))

evalLine = (state, isValid, line) -> foldl(guardStep(isValid), state, line)

pretty = (prettyState, states) -> foldl((a, b) -> strcat(a, b), "", map(prettyState, states))

prettyState_part1 = (state) ->
  let x = first(state) in
  let y = first(rest(state)) in
  show((y * 3) + x + 1)

prettyState_part2 = (state) ->
  if      state == [ 0, -2] then "1"

  else if state == [-1, -1] then "2"
  else if state == [ 0, -1] then "3"
  else if state == [ 1, -1] then "4"

  else if state == [-2,  0] then "5"
  else if state == [-1,  0] then "6"
  else if state == [ 0,  0] then "7"
  else if state == [ 1,  0] then "8"
  else if state == [ 2,  0] then "9"

  else if state == [-1,  1] then "A"
  else if state == [ 0,  1] then "B"
  else if state == [ 1,  1] then "C"

  else if state == [ 0,  2] then "D"

  else error("bad state")
